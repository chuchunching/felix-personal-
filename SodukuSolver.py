import copy 

# from tabulate import tabulate
def print_separating_row():
# print the separating row of the grid 
    print('+ â€” ' * 9, end='+ \n')
    return 

def print_grid(x:list):
# print grid in a clean way 
    print('')
    print('           ~ Sudoku Grid ~          ')
    for row in x:
        print_separating_row()
        print('| ', end='')
        print(*row, sep=' | ', end=' |\n')
    print_separating_row()
    return

def allotcate_placeholder_data():
# set the 2d array grid and allowcate 0 as placeholder value
    grid =[] 
    for _ in range(9):
        grid.append([])
        for _ in range(9):
            grid[-1].append('0')
    return grid

def ask_and_allocate(grid:list) -> list:
# ask for the value of each slot and allowcate the value to the sudoku 
    output = grid[:]
    for row_index, row in enumerate(grid):
        for index, element in enumerate(row):
            num = '-1'
            while int(num) < 0 or int(num) > 9:
                num = input('Input your row '+ str(row_index+1) +' slot ' + str(index+1) + ' value:' )
                while not num.isdigit():
                    num = input('Input your row '+ str(row_index+1) +' slot ' + str(index+1) + ' value:' )
            output[row_index][index] = num
        break
    return output

def analyse_row(row: list) -> list:
# to analyse a row/column of elements to suggest possible values () 
    # [3,0,0,4,0,8,5,1,0] check 3rd pos (index == 2)
    number_list = [1,2,3,4,5,6,7,8,9]
    # print('row is',row)
    for number in row:
        # print('numebr is',number)
        if number in number_list:
            # print('YES')
            number_list.remove(number)
    return number_list

def analyse_3x3_box(row_index: int, column_index:int, sudoku: list) -> list:
    number_list = [1,2,3,4,5,6,7,8,9]
    box_row = row_index // 3
    box_column = column_index // 3
    for row_index1 in range(box_row*3,box_row*3+3):
        for column_index1 in range(box_column*3,box_column*3+3):
            # print(sudoku[row_index1][column_index1])
            if sudoku[row_index1][column_index1] in number_list:
                number_list.remove(sudoku[row_index1][column_index1])
# debugging tool 
    # if row_index ==0 and column_index ==0:
    #     print('\nThe Box analyssis is: for row '+str(row_index)+' '+str(column_index))
    #     print('The box_row and box_column is '+str(box_row)+' '+ str(box_column))
    #     print(number_list)
    return number_list
    

def merge_lists(number_list: list, number_list1: list) -> list:
# to merge the results of analyse_row function for the row and column of a certain value.
    return [x for x in number_list if x in number_list1]

def transpose_sudoku(sudoku: list) -> list:
# to exchange the row and coolumn value of the grid
    output = allotcate_placeholder_data()
    for row in range(9):
        for column in range(9):
            output[column][row] = sudoku[row][column]
    return output
    
def update_possible_values(dummy_grid_possible_values: list, row_index: int, column_index: int, sudoku: list, first_time: bool) -> list:
# calls a function to update possible_values list (possible_values: list, coordinates: list) -> (possible_values: list)
    transposed_sudoku = transpose_sudoku(sudoku)
    if sudoku[row_index][column_index] == 0:
        if first_time:
            dummy_grid_possible_values[row_index][column_index] = merge_lists(merge_lists(analyse_row(sudoku[row_index]),analyse_row(transposed_sudoku[column_index])), analyse_3x3_box(row_index, column_index, sudoku))
        else: 
            dummy_grid_possible_values[row_index][column_index] = merge_lists(dummy_grid_possible_values[row_index][column_index], merge_lists(merge_lists(analyse_row(sudoku[row_index]),analyse_row(transposed_sudoku[column_index])), analyse_3x3_box(row_index, column_index, sudoku)))
    else:
        dummy_grid_possible_values[row_index][column_index] = 0
    return dummy_grid_possible_values

def fill_in_answer_and_update_grid_possible_values(possible_values: int, row_index: int, column_index: int, dummy_grid_possible_values: list, sudoku: list):
#fill in the answer on the sudoku 
    sudoku[row_index][column_index] = possible_values
    # update whole row and column for the dummy_grid_possible_values
    
    # update_possible_values(dummy_grid_possible_values, row_index, column_index)
    for i in range(9):
        # top to bottom
        dummy_grid_possible_values = update_possible_values(dummy_grid_possible_values, i, column_index, sudoku, False)
        # left to right
        dummy_grid_possible_values = update_possible_values(dummy_grid_possible_values, row_index, i, sudoku, False)
    # same 3x3 box
    box_row = row_index // 3
    box_column = column_index // 3
        
    for row_index1 in range(box_row*3,box_row*3+3):
        for column_index1 in range(box_column*3,box_column*3+3):
            dummy_grid_possible_values = update_possible_values(dummy_grid_possible_values, row_index1, column_index1, sudoku, False)
    
        
    # print('\nreplaced location is '+str(row_index)+','+str(column_index)+' with the value of ',possible_values)
    # for i in range(9):
    #     print(dummy_grid_possible_values[i])
    return 

def row_col_box_possible_list_generator(grid_possible_values: list,row_index: int, column_index: int)-> int:
# returns the three lists of possible_values in the same row, column and box from the specific coordinate, NOT including itself
    row_possible_list = grid_possible_values[row_index][:column_index] + grid_possible_values[row_index][column_index+1:]
    col_possible_list = transpose_sudoku(grid_possible_values)[column_index][:row_index] + transpose_sudoku(grid_possible_values)[column_index][row_index+1:]
    box_possible_list = []
    
    box_row = row_index // 3
    box_column = column_index // 3
    for row_index1 in range(box_row*3,box_row*3+3):
        for column_index1 in range(box_column*3,box_column*3+3):
            if row_index1 != row_index or column_index != column_index1:
                box_possible_list.append(grid_possible_values[row_index1][column_index1])
            # debugging tool 
            # else:
                # print(column_index, column_index1, row_index, row_index1)
    return [row_possible_list, col_possible_list, box_possible_list]
    

def check_completeness(sudoku: list) -> bool:
    # print_grid(sudoku)
    for row in sudoku:
        if 0 in row:
            # print('False')
            return False
    # print('True')
    return True 

def find_uniqueness(target_list: list, related_list: list)-> int:
    # print(target_list)
    for target_pointer in target_list:
        # print('target_pointer is', target_pointer)
        unique = True 
        for neighbour_possible_value in related_list:
            if type(neighbour_possible_value) == list:
                if contains_duplicate(target_pointer, neighbour_possible_value):
                    # print('neighbour_possible_value is', neighbour_possible_value)
                    # print('target_pointer is', target_pointer, 'and it is duplicated')
                    unique = False
                    break
        if unique == True:
            # print('UNIQUE')
            return target_pointer
    return 0
    
def generate_grid_possible_values(sudoku: list)-> list:
# calls a function on all locations to analyse the possible values the specific slot can be (coordinates: list, sudoku: list) -> (possible_values: list)
    grid_possible_values =[]
    for row_index, row in enumerate(sudoku):
        grid_possible_values.append([])
        for column_index, number in enumerate(row):
            grid_possible_values[-1].append([])
            # print(column_index)
            grid_possible_values = update_possible_values(grid_possible_values, row_index, column_index, sudoku, True)
    for row_index, row in enumerate(sudoku):
        for column_index, number in enumerate(row):
            # print(row_index, column_index)
            # print('possible_values are: ',grid_possible_values[row_index][column_index])
            all_related_list = row_col_box_possible_list_generator(grid_possible_values, row_index, column_index)
            for related_list in all_related_list:
                if grid_possible_values[row_index][column_index] != 0:
                    unique_value = find_uniqueness(grid_possible_values[row_index][column_index], related_list)
                    if unique_value != 0:
                        grid_possible_values[row_index][column_index] = [unique_value]
                        break
            
    return grid_possible_values

def contains_duplicate(target_pointer: int, neighbour_possible_value: list) -> bool :
    for tmp_pointer in neighbour_possible_value:
        # print('target_pointer is', target_pointer, 'tmp_pointer is', tmp_pointer)
        if target_pointer == tmp_pointer:
            return True
    return False 
        

        
def check_contradiction(dummy_grid_possible_values: list, sudoku: list) -> bool:
    for row in dummy_grid_possible_values:
        for pointer in row:
            if pointer != 0:
                if len(pointer) == 0:
                    # print('The element found to be invalid is', pointer, 'in', row)
                    return True
    
    return False

def try_one_value(possible_value: int, sudoku_duplicate: list, row_index: int, column_index: int, grid_possible_values: list, sudoku: list) :
    sudoku[row_index][column_index] = possible_value
    print('\n\n Try Everything called~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~')
    print('possible_values at the guessing spot is', grid_possible_values[row_index][column_index])
    print('At position', row_index, column_index, 'Try', possible_value)
    # print_grid(sudoku)
    sudoku_duplicate = copy.deepcopy(sudoku)
    result = method_one(sudoku_duplicate, 0, True)
    if result[0] == True:
        print('Hello')
        return result[1]
    else:
        # print('Backtrack to most recent guess and try another one!')
        return 0

def guess_everything(sudoku: list, grid_possible_values: list): 
    # print(grid_possible_values)
    output = []
    for row_index, row in enumerate(sudoku):
        for column_index, value in enumerate(row):
            if value == 0:
                for possible_value in grid_possible_values[row_index][column_index]:
                    sudoku_duplicate = copy.deepcopy(sudoku)
                    result = copy.deepcopy(try_one_value(possible_value, sudoku_duplicate, row_index, column_index, grid_possible_values, sudoku))
                    if result != 0:
                        print('yooo')
                        return result
    
    return sudoku
    
    # for answer in output:
    #     if answer != 0:
    #         return answer
                        
    

def method_one(sudoku: list, times_called_method_2: int, brute_force: bool) -> list:
# solves all the values in sudoku and returns the result out
    # print('Start of Method 1')
    transposed_sudoku = transpose_sudoku(sudoku)
    grid_possible_values = generate_grid_possible_values(sudoku)
    
    # Testing the functions for analyse_row,merge_lists and variable grid_possible_values
    
    # print('\n Printing grid_possible_values:')
    # for i in range(9):
    #     print(grid_possible_values[i])
        
    # calls a function to scan all the possible_values list for a suitable value for one slot and returns the corrected sudoku  (possible_values: list, sudoku: list) -> ( coordinates: list, sudoku: list)
    # calls a function to check for any 0s in the sudoku (sudoku: list) -> (complete: bool)
    
    while True:
        # repeated as long as there is an update in every iteration
        updated = False
        for row_index, row in enumerate(grid_possible_values):
            for column_index, possible_values in enumerate(row):
                if type(possible_values) == list:
                    if len(possible_values) == 1:
                        fill_in_answer_and_update_grid_possible_values(possible_values[0], row_index, column_index, grid_possible_values, sudoku)
                        updated = True
                        continue
                    related_list = row_col_box_possible_list_generator(grid_possible_values,row_index, column_index)
                    if check_contradiction(grid_possible_values, sudoku):
                        print('Checked to be invalid by check_contradiction function')
                        print('End of Method 1')
                        return [False,]
        
        if updated == False:
            break
        
    # to prxint out the grid of possible values
    # print('\nGrid of possible values at the end is:')
    # for i in range(9):
    #     print(grid_possible_values[i], end='\n\n')
    
    # check for completeness
    if not check_completeness(sudoku):
        if brute_force:
            print('Sudoku Cannot be completed, need to guess the next slot')
            print('End of Method 1')
            sudoku = copy.deepcopy(guess_everything(sudoku, grid_possible_values))
            print('sudoku before crash is:')
            print(sudoku)
        else:
            print('End of Method 1')
            print('Back Propagation Starts: ')
            times_called_method_2+=1
            sudoku = method_two(sudoku, times_called_method_2, brute_force)
    # check for validity (see if there is repeating value)
    if not check_validity(sudoku):
        return [False,]
    print_grid(sudoku)
    print('returns method 1')
    return [True,sudoku]

def recursive_solving(grid_possible_values: list, trial_history: list, board_history: tuple, grid_possible_values_history: tuple, trial_value_history: dict, times_called: int, times_called_method_2: int, brute_force: bool):
    
    times_called += 1
    print('------------------------------------------------------------------------ recursive_solving', times_called)
    
    row_index = 0
    column_index = 0
    while True:
        possible_values = grid_possible_values[row_index][column_index]
        if type(possible_values) == list:
            print('\nGrid of possible values at initiation is:')
            for i in range(9):
                print(grid_possible_values[i], end='\n\n')
            print_grid(sudoku)
            print('possible_values are', possible_values)
            trial_value = possible_values[0]
            trial_history.append((row_index, column_index))
            if len(grid_possible_values[row_index][column_index]) != 1:
                grid_possible_values[row_index][column_index].pop(0)
            else: 
                grid_possible_values[row_index][column_index] = 0
            trial_value_history[trial_history[-1]] = trial_value
            
            # print('trial_value is', trial_value)
            # print('trial_history is', trial_history)
            # print('trial_value_history', trial_value_history)
            # print('\nGrid of possible values after popping is:')
            for i in range(9):
                print(grid_possible_values[i], end='\n\n')
            # Reset grid_possible_values and sudoku
            tmp_grid_possible_values = copy.deepcopy(grid_possible_values)
            tmp_sudoku = copy.deepcopy(board_history[-1])
            # print('\n\nSudoku before Error')
            # print(sudoku)
            print_grid(sudoku)
            fill_in_answer_and_update_grid_possible_values(trial_value, row_index, column_index, tmp_grid_possible_values, tmp_sudoku)
            grid_possible_values = list(grid_possible_values_history)
            sudoku_validity = method_one(tmp_sudoku, times_called_method_2, )
            print('sudoku_validity[0] is', sudoku_validity[0])
            if not sudoku_validity[0]:
                print('Sudoku not valid by back Propagation')
                # print('Trial value is')
                # print('trial_value is', trial_value)
                # print('trial_history is', trial_history)
                # print('trial_value_history', trial_value_history)
                # print('\nGrid of possible values after one Propagation is:')
                # for i in range(9):
                #     print(grid_possible_values[i], end='\n\n')
                
                return recursive_solving(grid_possible_values, trial_history, board_history, grid_possible_values_history, trial_value_history, times_called, times_called_method_2, brute_force)
            else:
                print('End of Recursive_solving')
                return sudoku_validity[1]
        else:
            if column_index != 8:
                column_index += 1
            else: 
                column_index = 0
                row_index += 1
    print('Stuck in While Loop')

def method_two(sudoku: list, times_called_method_2: int, brute_force: bool) -> list:
# Method 2: Back Propagation
# when method 1 no longer works:
    # initial setup 
    transposed_sudoku = transpose_sudoku(sudoku)
    grid_possible_values = generate_grid_possible_values(sudoku)
    
    trial_history = []
    board_history = tuple([sudoku])
    grid_possible_values_history = tuple(grid_possible_values)
    trial_value_history = {}
    
    # debugging tool 
    print('\n\n/////////////////////////////////////////////////////////////////////////////////////////// Method 2', times_called_method_2, end='\n\n')
    print('board_history before error')
    print(board_history)
    
    # recursive
    times_called = 0
    answer = recursive_solving(grid_possible_values, trial_history, board_history, grid_possible_values_history, trial_value_history, times_called, times_called_method_2, brute_force)
    # while True: 
    #     results = recursive_solving(grid_possible_values)
    #     if not results[0]:
    #         grid_possible_values = results[1]
    #         recursive_solving(grid_possible_values)
    #         exit()
    print('End of Method 2')
    return answer

def check_validity_on_row(sudoku: list) -> bool:
# checks the validity of sudoku in a row by checking whether there is repeated value
    for row in sudoku:
        mem = []
        for number in row:
            if number in mem:
                return False
            elif number == 0:
                pass
            else: 
                mem.append(number)
    return True

def check_validity_on_box(sudoku: list) -> bool:
    for box_row in range(3):
        for box_column in range(3):
            mem = []
            for row_index1 in range(box_row*3,box_row*3+3):
                for column_index1 in range(box_column*3,box_column*3+3):
                    if sudoku[row_index1][column_index1] != 0:
                        if sudoku[row_index1][column_index1] not in mem:
                            mem.append(sudoku[row_index1][column_index1])
                        else: 
                            return False
    return True 
    
    

def check_validity(sudoku: list) -> bool:
# check whether the sudoku makes sense or not i.e are there any duplicated numbers:
    if check_validity_on_row(sudoku) and check_validity_on_row(transpose_sudoku(sudoku)) and check_validity_on_box(sudoku):
        # print('\nSECURED! Sudoku is valid!')
        return True
    else:
        print('ERROR, GRID IS NOT CORRECT')
        return False

def check_data_validity(data: list):
# checks the vailidity of the data inputted 
    if len(data) != 9:
        print('ERROR, GRID IS NOT CORRECT ON ROW NUMBERS')
        exit()
    for row_index, row in enumerate(data):
        if len(row) != 9:
            print('ERROR, GRID IS NOT CORRECT ON ROW ' + row_index)
            exit()

def allocate_debugging_data(sudoku: list, data: str) -> list:
    data_easy = '500467309 903810427 174203000 231976854 857124090 496308172 000089260 782641005 010000708'
    data_big_boss = '000801000 000000043 500000000 000070800 000000100 020030000 600000075 003400000 000200600'
    data_for_box_analysis = '012000000 345000000 678000000 000000000 000000000 000000000 000000000 000000000 000000000'
    # link at: https://images.app.goo.gl/DmzxJFVMcmPXDYjM7
    data_medium = '000500006 000870302 270300081 000034900 793050614 008790000 920003057 506087000 300005000'
    # https://www.canstockphoto.com/sudoku-game-with-answers-simple-vector-82405983.html 000500006 000870302 270300081 000034900 793050614 008790000 920003057 506087000 300005000
    data_medium1 = '000300070 009500042 070400980 000002007 003105600 100900000 068003050 530001700 010008000'
    # https://image.shutterstock.com/z/stock-vector-vector-sudoku-puzzle-with-solution-medium-level-1113614942.jpg
    data_medium2 = '000300070009500042070400980000002007003105600100900000068003050530001700010008000'
    test_data = '201800060 000060900 005000000 000007003 806100090 040000000 090400000 050000020 402001700'
    data_20_clues = '800000000 003600000 070090200 050007000 000045700 000100030 001000068 008500010 090000400'
    # https://abcnews.go.com/blogs/headlines/2012/06/can-you-solve-the-hardest-ever-sudoku
    if data == '':
        chosen_data = data_20_clues
    else:
        chosen_data = data
    
    if ' ' in chosen_data:
        formatted_data = chosen_data.split()
        print(formatted_data)
    else:
        formatted_data = []
        while len(chosen_data) != 0:
            formatted_data.append(chosen_data[:9])
            chosen_data = chosen_data[9:]
            
    check_data_validity(formatted_data)
    for row in range(9):
        for column in range(9):
            sudoku[row][column] = int(formatted_data[row][column])
    return sudoku

def kaggle_data() -> list:
    # to row 200
    kaggle_question_string = '070000043040009610800634900094052000358460020000800530080070091902100005007040802 301086504046521070500000001400800002080347900009050038004090200008734090007208103 048301560360008090910670003020000935509010200670020010004002107090100008150834029 008317000004205109000040070327160904901450000045700800030001060872604000416070080 040890630000136820800740519000467052450020700267010000520003400010280970004050063 561092730020780090900005046600000427010070003073000819035900670700103080000000050 310450900072986143906010508639178020150090806004003700005731009701829350000645010 800134902041096080005070010008605000406310009023040860500709000010080040000401006 165293004000001632023060090009175000500900018002030049098000006000000950000429381 000003610000015007000008090086000700030800100500120309005060904060900530403701008 405001068073628500009003070240790030006102005950000021507064213080217050612300007 960405100020060504001703006100004000490130050002007601209006038070218905600079000 904520070001890240002643000070960380000108700600000010090080000000750030000312569 001408006093520741000010520602080300007060000005039060064052109020000654500607083 007300054245080900003040070070960000000020760000801002008294016609108020000007003 005346170000000050000800009502930741070000003000700020090050632207600400600420007 320090400705021800001060372218037009500480700000005000670000280000873900804000107 000030007480960501063570820009610203350097006000005094000000005804706910001040070 087002010204017003006800705508001000640008100002050670439180007020900030700023091 040000008760020349000470500900000030000036702308947000000004010200700603690001000 007009050040000930059740080000016790083000002710000000830060020000395018605020070 620740100070100052508000370067300900090000060800970031002000006000800000450002003 627140503345206971089503602000700364793054018460008059056031097971005836834067105 720890500390460100000217890809002000204008000105049287610000028080020915950701040 803700000026000004097100203705000908901070040038401567170950800680210435352846000 206007905345092018000850060000509000708000450004083126420060580571200094860000200 700000000400708061100296847000001400801000030090600075080010006007052394935467010 900000002010060390083900100804095007130670049060041000302010050000500000541080030 005000060000006302040081597012038754000200810087014000120007680000092030954860200 709000100421000050300700008100000302908320000002070809070530400090000675000600093 001300002079000000020670903000967300750001049080503100040702530205806700107405060 600017400401003008059800721120000050000040800008020100004530007700090086263170000 800005047040008500000000630000000490590040002072006305980000273067804051030070000 400000070060850240000301065049078500007032008280009430120703004700010000006200009 500000260024086000807152300000600703003400006700098120030800600072000481000070000 604001035003450001521900000069807104250014007410090006000060010000039070070140503 420796050300280497879004612690005201538400009010369004983647025006150000100020346 080000090090502000003001408007090630000000001650020000900300080310040970002879013 005020040007090318106840070510000693300000700074230001050764189040001002081902030 000000065004056701070813940006005490500690000009042000062504179000000030000000628 790048060125976300040305720980657413007100856001000007006002135009701000010500000 290800300000000046786500200020000100100009482647000903875200004310645700009008000 180023000942500008060010092209840000608395040300067850806000027407002900001700004 908260351500094872002010409003000084154083007020000905760100040009006000001005090 950064037046081059001539080034106070865000020090028000500612000613470090000890005 070620509029400000680570000300000000806750093000086005000000170064030000005004032 790400801100780090000910402975821046000000785006504000207090034300200908009100627 600502000450093700030684090203800560001000002007025010005036400320750601976418053 870500060010000207640180509000001000120006075008072006000605008000004000904008621 032104070500300002000625000080061020007402608201780054640000030098003700723056001 480060001103008526065700080058200010004080300021679005006023907510946008009800000 030074096600398700008061340053007009400059070096002084000023600310040000862000437 000001000003006097061037500000709800830040001000020006740008610300060052000900003 001002003004000900296015048560008197009000054700950300400187600010500402900020005 003060005792051400006200009268719054030026978000000601050103090029004000800002003 049003825500709106361025007600590084800004309190370562008000691415986273970130450 026853700000000000053040096240076810319005460600134020064397180708502604002060079 468050702273140509009002463001860000090030001030000600980501200327600104016324908 000009038000005004350700091000400000407500020060020805500900006840001070036040009 604300090210079064905014270450003900000001000008000000032700080890206010506000000 591300200004062031000917508063005080100480003057000000000090610048270395000050870 309000050007003060081407200108900020700340910932068000004080090506704000003020607 406150083703200000508003200630700500157009024982500307049680702000900030071300009 100000809950018000300000076580906000003500000204700560000000081600004003830169045 000000000084500970291000008809100500753942060010000000002714000370080400100035700 243600950005201000706953802657009080804507029009030060501402700008016005092785004 001090000009080054080576900076925301130000007495700080608250070000000006943607020 030810070000067105710003084002085790807436000600792040160329000920571860573048910 690538072080000600030907085040000900006029051000751800904000010008610090003000740 100500007090830004800200100400010072000048351001302006204900715315007690000000023 072834069045020008000075020014080000867040003200300800523408000000003080486007310 907201000000000006010070250825019064749032800003508090302000501680300907500027638 008052070091040006705800400570083204600000017810764035156400320024030700387095641 037604250200300100009250008000700090902005031740130006090070604001060000526800903 006007208310082076700061430009018500105470060800203004000030680678095300000820750 000000840090207100017568903700000600040602000003000002030850271900036500001700006 000000048300100720840000003003002006017060200620580304000013402100600890004857001 760009001024810076001706902600905018005030607800060295200600700400357009530090800 210089357090002800004700912341506200509004001600800430070325060100007589065910020 580062041060901000009000600006107839720008010001000006000705000075406003648039150 140000270070054319500207048000068024080400107024730000007000802802003400491806000 010000608900000100706300000500743000000005400340091075003200091104000300069000050 380500091697010005005080700460200003073098140800743000140000907730904000950070030 090143802600590007480672593547261009368459721019837654906384215154706930030915006 000050780000600010090020603100400000054260090007030001582910370000002500003000129 040301000000427060270560048500094600904006852706005090001950780090013000325700906 750314600830006001010000407507208000400000059000950084300000070081000003002001800 000003648605700923003680015109408207000009050500070000807905000306804070250300189 007310902380050006025000031073009104140830007650701328034080600500207010716493285 108600003000080602060054819900045231050960000481700090000097065019000380605410900 000070060200486010080032000400800030000047002600213740831054000527000000960020570 370006905040300000906102004164059200800030047735248600520067010010003809083900752 000534007000297500020016004000008000058409070000000600500000010900641850183700946 709000040032640059080279106000320000290001308013000020076100200000804003500002091 000963000301520490060001325810290574096000130072004080930048060108659740647130058 050600041003045600960800300600000100007008204402000003029500036006024510000000802 763541289048009050009860070476003095530096002002150730005000400027005060080627510 600053904000600082098712305780304520109200706520176839000431258840000600000068007 407851030000470805001032640018723400670089020930604708349208000000300269720090384 000090015000100840050380207000530000000602431012009500028003004037000002400050083 000000145903405700005000900092070000031502000600008500080009357700800600006007090 092405000007000250010800000746000309009060802100009067901030000600080900084590001 002085700000607000000100000400001007267504000001000090518700430030010506900003001 802604050000001064004005003900107430508390601317046020400063708080000000000000506 100305098090000000080179602624000000800607420370040800068004930030008060005006204 600083570300700900000069030000001008100630400503090010840302009032040085000058000 500670084407000630068000701000000209050980460679042518105869047796400852003720096 000006900000020874528000360035081000000073185070064209002040008019008403700002006 300504026000070413000000907196402738045060090000081004080307049032008175400090380 020030108500970020800002003740605300005087602060410800004090560009800204150260000 009630080081000023200580074000103809000408002000200460050900030070804290802010046 005400890000037254410809030200370569501900000790000008020004900640790103050010000 098100063060040000702500010400058030015000080306010000600005040927000300000206007 300200070061008020008400000000700350030010290902036000003000008507009610100000900 540000637620780540937456210754030900310000050002040070295600183480190002170300095 136057000520030006008062930385020409070090002402685070954306000203578190000209603 276450190000678000800219007942007810507800409681090302000930700009700246028100003 000002534000010280200034000020000740906000300140203000708000001300009600460070803 390001487017304059864907000100805760008436001040710835406073098900648370700509040 030402080008060327906837041000000978004278000000093402375086000069724835002005700 042500706876200300301806049027048560009000400463057920090403605000009000730005100 190406300523090700060300000000140257300560000040700600009000000401008902000007036 093207000007940320820301000080504013302810900950700000060003590074600001230005476 720000480004030600356104070018470306640850120000619854065000700070900031183045960 340680205800005401020000836680510947493860152500024008901702003000358700738100020 005087000070340086048016275457128960900504728680030041700601002830470600500803407 478962000025400008690035700900504000004070509157389200800100075003040602049006083 900002050002905004075340200097063405050000126080000973500607390000400502320001007 159080070240790001000000004300008000080070143092000005900100460507840300001007050 021005030035106924060243000146000098070060540258001060580619372002504106613728450 060107004010480650204659300009008000830746020046900081158300079072090006693000140 036704100007632000094500000000100034069807512000053000920000006050208001470300050 300400192008205047720010058439006500000901006261000000007182960190053000680704205 170504069009000005546091300680070020930100640700209500000006004000700096408002750 360000209800309005090012076000000002080090610603041800026580031100000000500020908 006102487002080000700430000015000740897004002230750098060275830000009010028610570 080026005000000623020940170050092081708400002090000040075634200260080030903007806 079538200000920037002000008085340002003280540001057309000170820000802406008463700 201006500000500800087300960000603704020009000400102398005060239093270081002001005 450029030139480050802300009504008090008500047070614008705000200200860900000070080 000008601400706850050003040005020004146580000003004905061805492020900076097600010 090060085180002369360900000050040008000009004074200050000736590700000000509000073 170526093890000602200198050520001080000050007900800100000973208069080500380610079 000081003030054800804007615056100382180500700090870001315060000678915034009030106 704930008008607000039000400070000600400500032000023709800200300206308175013700204 570203001903004085041000300700000190000098000219007030054806070002970010090020053 600000701010079603273801000800750002007018000021040008180025300030004060400307200 580700940027091030010008706038200079269807005051936080895173200000504800342609107 603000002709400300000000940210050890308027654060800701804001000500009438000300010 503004008008900605000570041130700006020600003406103000950017062001025030000896504 070940320200675009050008406843152000062407081000809004090200000000080060305000140 250400000300000054100000006000803009030000040090570020001030690003005082020069010 100004875900071002800502049300100490570049218001020356045063081619007003703215064 300007000009006710600004359702010098530409007001000000168000200900030580050000971 140203000986005030070009005000000800069000143007306520000830700328017056791600382 800005002420103865035048970742800109390750000518490030007004000953010020004500710 100780005030049120009300478850000000306904802000063040900420050400000000620038094 010000340920683050030714000052060001000001003000400079186592000049130006000046000 500280006980053000023607008618075040407800060005064780351000604700000800809010075 807026035450008070306570000971005243503742601600913000008109067000084010109050080 008603019305200000000007603501000000604000080890400052000750001000002004402006735 800100507070906001231405896008040760704012008000700015507601000910800004603000000 250140000010920060930086001193058700672009835080002000347090080000034000009760450 000000094041003000920060030030059006100200749298004300060300002002096150000042000 006203578800000603200768004000000860628100047349076102960002085005607230000001090 360400050401600070000057004030024019000009006010000023006008237290040601000000090 060004108081200050702000069050020900246107085973680000027050000300740002000800090 050843002800001000000965783000008924040106530090204018024007090086000270570600300 000003090010200700700000030090028047400190026120000589082000000900012654001006270 500081607000500900097060200001056000000000870004000000000308502200040760700002103 804005109090060074007100560400900800059080640010000032000000080030500016005070093 700908000600530000900100080204300000070060503030700020095402008480090152302815079 021374800740180002000026070230000500058000024900540008400008013096030005300450080 100700005470028060285003090002000034004060700300250016000000000020400371741900000 613040027000000000094000065200000030009607054000009600706300010000500006082164570 051003027890251060002768000340009206000380579078506431703405002509602700060017050 800059070050234006064081235608500043070800001305060802790305428401006007032478600 080500000016700005000000709109073408005829070078100030002005107000007080001068593 000080036002010050400509180020870600000090070076005010210708000045063729037000000 000854900030679100040010060000140600004068012102005008800000007000027000203000501 002608000008900420004100009703010060600020500820004100010050908250481370480793201 000000040431000800897004020062400300040293010500007092000001200000020074080570930 268040701007001294901237068516003020002064000000002050020010385005329007603050902 023901006941005732685023010000200078290000001104008000007580600450006003800300000 108036907000810304004509000200740680400000000000058002950180200007900801012004000 000105006160800900390700501001907805050380060080000003070008659000000400008509207 008604079910287040007000010403860001201370000059142637700408100092756483004930062 805007620090803057604005180081406090547920000369700241403689070708514030950302814 408003002276014090590670001004790105160020800025108064389501247740209300052347000 872000060100762080630900010040003520500004601310006007400207803001050000050040070 230001980107680423869000710640302000070560200502147360710235040005804000083910500 005890603060403000030050010500038100003009000190570000000042008850010409070905020 602075309003020080940308072790861000028703006310000847061900750009157204000086901 001070040700400038003000067004037020908024070307080050009008200006213090100056083 306700451000201006700000002290140005801000000435000109670000000043000900500003060 080960720056402091972050060010006000500210306638745910093627050405830270020594000 020090004641000037070000002500040021030780509006003000000000410000030096460200075 670000040300000000001065000807300090460000030009478201100000023706080054000910700 300006205052300000984000607840001579020058043000700060500403001270000000009502000'
    kaggle_answer_string = '679518243543729618821634957794352186358461729216897534485276391962183475137945862 371986524846521379592473861463819752285347916719652438634195287128734695957268143 748391562365248791912675483421786935589413276673529814834962157296157348157834629 298317645764285139153946278327168954981453726645792813539821467872634591416579382 142895637975136824836742519398467152451328796267519348529673481613284975784951263 561492738324786195987315246659831427418279563273564819135928674746153982892647351 318457962572986143946312578639178425157294836284563791425731689761829354893645217 867134952241596783395872614978625431456318279123947865534769128619283547782451396 165293874974851632823764195489175263536942718712638549398517426241386957657429381 728493615349615827651278493186539742932847156574126389815362974267984531493751268 425971368173628594869543172241795836736182945958436721597864213384217659612359487 968425173723861594541793286157684329496132857832957641219546738374218965685379412 984521673361897245752643891175964382429138756638275914593486127216759438847312569 251478936893526741476913528642185397937264815185739462364852179728391654519647283 867319254245786931913542678472963185381425769596871342738294516659138427124657893 925346178786291354341875269562938741174562983839714526498157632217683495653429817 326798451745321896981564372218637549569482713437915628673149285152873964894256137 925831467487962531163574829749618253352497186618325794276189345834756912591243678 987532416254617983316849725578261349643798152192354678439185267821976534765423891 149653278765128349832479561976512834451836792328947156583264917214795683697381425 367289451248651937159743286524816793983574162716932845831467529472395618695128374 623745198974138652518269374267381945391524867845976231782493516136857429459612783 627149583345286971189573642518792364793654218462318759256831497971425836834967125 721893564398465172546217893869572431274138659135649287613954728487326915952781346 813724659526389174497165283745632918961578342238491567174953826689217435352846791 286317945345692718197854362612549873738126459954783126423961587571238694869475231 768145923429738561153296847576321489841579632392684175284913756617852394935467218 956134782417268395283957164824395617135672849769841523372416958698523471541789236 375429168891756342246381597612938754439275816587614923123547689768192435954863271 789256134421893756365714928157968342948321567632475819276539481893142675514687293 861359472379124856524678913412967385753281649986543127648792531235816794197435268 682917435471253968359864721127389654536741892948625173894536217715492386263178549 829365147643718529751492638318527496596143782472986315984651273267834951135279864 415926873963857241872341965349178526657432198281569437128793654794615382536284719 519734268324986517867152349481625793293417856756398124135849672972563481648271935 694281735783456921521973648369827154258614397417395286835762419146539872972148563 421796853365281497879534612694875231538412769712369584983647125246153978157928346 586437192194582367723961458247198635839654721651723849975316284318245976462879513 835127946427695318196843275512478693368519724974236851253764189749381562681952437 198427365234956781675813942826175493543698217719342856362584179987261534451739628 793248561125976384648315729982657413437129856561834297876492135359781642214563978 294816375531927846786534219928453167153769482647182953875291634312645798469378521 185923476942576138763418592259841763678395241314267859896154327437682915521739684 948267351516394872372518469693752184154983627827641935765139248289476513431825796 958264137346781259721539486234156978865947321197328564589612743613475892472893615 471623589529418367683579421357942816846751293192386745938265174264137958715894632 793452861124786593658913472975821346412369785836574219287695134361247958549138627 619572348458193726732684195293841567541967832867325914185236479324759681976418253 879523164315469287642187539467851392123946875598372416231695748786214953954738621 832194576516378492479625183384561927957432618261789354645817239198243765723956841 482365791173498526965712483758234619694581372321679845846123957517946238239857164 135274896624398751978561342253487169481659273796132584549723618317846925862915437 287591364453286197961437528624719835839645271175823946742358619398164752516972483 871492563354876921296315748563248197189763254742951386425187639618539472937624815 483967215792351486516248739268719354135426978947835621654173892329584167871692543 749613825582749136361825947623591784857264319194378562238457691415986273976132458 926853741471629358853741296245976813319285467687134925564397182798512634132468579 468953712273146589159782463741869325695237841832415697984571236327698154516324978 674219538192385764358764291285436917417598623963127845521973486849651372736842159 674382591213579864985614273451863927769421358328957146132745689897236415546198732 591348267784562931236917548463725189129486753857139426375894612648271395912653874 329816754457293861681457239148975326765342918932168475274681593596734182813529647 426157983793268145518493276634712598157839624982546317349681752265974831871325469 146327859957618432328495176581946327763582914294731568479253681615874293832169745 537896142684521973291473658829167534753942861416358297962714385375289416148635729 243678951985241376716953842657129483834567129129834567561492738478316295392785614 751394268369182754284576913876925341132468597495731682618253479527849136943617825 235814679489267135716953284342185796897436521651792348168329457924571863573648912 691538472587142639432967185145386927876429351329751864964273518758614293213895746 143569287792831564856274139438615972629748351571392846264983715315427698987156423 172834569945126738638975421314789652867542193259361847523418976791653284486297315 957261483238495176416873259825719364749632815163548792372986541681354927594127638 468952173291347586735816492579183264643529817812764935156478329924631758387295641 837614259254398167619257348183726495962485731745139826398572614471963582526841973 596347218314582976782961435439618527125479863867253194251734689678195342943826751 256391847398247165417568923729413658145682739863975412634859271972136584581724396 971236548356148729842795163583472916417369285629581374768913452135624897294857631 768529431924813576351746982642975318195238647873461295219684753486357129537192864 216489357793152846854763912341576298589234671627891435978325164132647589465918723 587362941264971385319854672456127839723698514891543726932715468175486293648239157 146389275278654319539217648713568924685492137924731586367145892852973461491826753 412579638935486127786312549521743986697825413348691275853264791174958362269137854 384567291697412385215389764469251873573698142821743659146835927738924516952176438 795143862623598147481672593547261389368459721219837654976384215154726938832915476 236159784875643912491728653168497235354261897927835461582914376619372548743586129 649381275158427369273569148512894637934176852786235491461952783897613524325748916 759314628834726591216895437597248316428163759163957284345689172681572943972431865 721593648685741923943682715169458237472139856538276491817925364396814572254367189 467318952381952746925674831873529164142836597659741328234185679598267413716493285 128679453594183672367254819976845231253961748481732596842397165719526384635418927 143579268259486317786132954472895136315647892698213745831754629527961483964328571 371486925248395176956172384164759238892631547735248691529867413417523869683914752 869534127431297568725816394697128435358469271214375689546983712972641853183752946 769513842132648759485279136854326917297451368613987425376195284921864573548732691 254963817381527496769481325813296574496875132572314689935748261128659743647132958 258693741173245698964817325695432187317958264482176953729581436836724519541369872 763541289248379651159862374476283195531796842892154736615938427327415968984627513 612853974375649182498712365786394521139285746524176839967431258841527693253968417 467851932293476815851932647518723496674589123932614758349268571185347269726195384 284796315673125849951384267746531928895672431312849576128963754537418692469257183 278936145913485762465721983592674831831592476647318529184269357729853614356147298 392475186867913254415826793746258319539761842128349567951632478673184925284597631 142985763895637142673142985489361257267594318351278694518726439734819526926453871 892634157735821964164975283926187435548392671317546829459263718681759342273418596 142365798796482315583179642624853179851697423379241856268514937437928561915736284 619283574384715926257469831476521398198637452523894617845372169932146785761958243 532671984417298635968534721384156279251987463679342518125869347796413852843725196 147836952963125874528497361235981647496273185871564239352649718619758423784312596 379514826658279413214836957196452738845763291723981564581327649932648175467195382 427536198531978426896142753748625319915387642362419875284793561679851234153264987 749632185581749623236581974427163859965478312318295467154926738673854291892317546 375426891869137254412859637284371569531968742796542318123684975648795123957213486 598127463163849725742563918479658231215374689386912574631795842927481356854236197 359261874461978523278453169846792351735814296912536487693125748587349612124687935 548912637621783549937456218754831926319267854862549371295674183483195762176328495 136957248529834716748162935385721469671493582492685371954316827263578194817249653 276453198193678524854219637942367815537821469681594372465932781319785246728146953 671892534534617289289534176823961745956748312147253968798326451315489627462175893 395261487217384659864957213132895764578436921649712835426173598951648372783529146 731452689548169327926837541253641978694278153817593462375986214169724835482315796 942531786876294351351876249127948563589362417463157928298413675615729834734685192 198476325523891764764325198986143257317562849245789613679234581431658972852917436 493257168617948325825361749786594213342816957951732684168473592574629831239185476 721596483894237615356184279518472396649853127237619854965321748472968531183745962 349681275876235491125479836682513947493867152517924368951742683264358719738196524 165287394279345186348916275457128963913564728682739541794651832831472659526893417 478962351325417968691835724936524817284671539157389246862193475513748692749256183 934712658162985734875346219297163485453879126681254973548627391719438562326591847 159384276246795831873216594314568729685972143792431685928153467567849312431627958 421985637835176924967243815146357298379862541258491763584619372792534186613728459 365127894917483652284659317729518463831746925546932781158364279472891536693275148 836794125517632849294581763785126934369847512142953687928415376653278491471369258 356478192918265347724319658439826571875931426261547839547182963192653784683794215 173524869829637415546891372685473921932185647714269538297356184351748296468912753 361457289872369145495812376719638452284795613653241897926584731138976524547123968 356192487942587361781436925615928743897364152234751698169275834573849216428613579 387126495419875623526943178654792381738451962192368547875634219261589734943217856 179538264856924137342716958985341672763289541421657389694175823537892416218463795 231896547964527813587314962159683724328749156476152398715468239693275481842931675 457129836139486752862357419524738691618592347973614528785941263241863975396275184 739458621412796853658213749985327164146589237273164985361875492824931576597642318 497361285185472369362958417953647128621589734874213956248736591736195842519824673 174526893895734612236198754527341986618259347943867125451973268769482531382615479 567281493931654827824397615756149382183526749492873561315462978678915234249738156 764931528528647913139852467372489651491576832685123749857214396246398175913765284 576283941923714685841569327768352194435198762219647538154836279382975416697421853 694532781518479623273861954846753192957218436321946578189625347732194865465387219 583762941627491538914358726438215679269847315751936482895173264176524893342689157 643985172759412386182736945217654893398127654465893721834571269571269438926348517 513264978748931625269578341135782496827649153496153287954317862681425739372896514 678941325234675819159328476843152697962437581517869234496213758721584963385796142 256497138379681254184352976417823569532916847698574321741238695963145782825769413 132694875954871632867532149328156497576349218491728356245963781619487523783215964 325197864489356712617824359742513698536489127891762435168975243974231586253648971 145263978986175234273489615432591867569728143817346529654832791328917456791654382 871965342429173865635248971742836159396751284518492637187324596953617428264589713 142786935738549126569312478854271369376954812291863547983427651417695283625138794 617925348924683157835714692752369481498271563361458279186592734549137826273846915 574281936986453127123697458618975342497832561235164789351728694762549813849316275 817426935452398176396571824971865243583742691624913758248139567765284319139657482 278643519365219478149587623521378946634925187897461352983754261756132894412896735 896123547475986321231475896158349762764512938329768415547691283912837654683254179 256147398718923564934586271193658742672419835485372619347295186561834927829761453 387521694641983527925467831734159286156238749298674315869315472472896153513742968 196243578874915623253768914517324869628159347349876152961432785485697231732581496 367481952451692378829357164635824719782139546914576823546918237293745681178263495 569374128481269753732518469158423976246197385973685241827951634395746812614832597 957843162863721459412965783631578924248196537795234618124357896386419275579682341 254763891813249765769581432395628147478195326126374589682457913937812654541936278 542981637683527914197463285371856429965234871824719356416378592239145768758692143 864735129591862374327149568473926851259381647618457932946213785732598416185674293 751928346648537291923146785214359867879264513536781924195472638487693152362815479 621374859749185362583926471234817596158693724967542138475268913896731245312459687 163749285479528163285613497612897534854361729397254816538176942926485371741932658 613845927527916348894723165268451739139687254475239681756398412341572896982164573 651943827897251364432768195345179286126384579978526431783495612519632748264817953 823659174157234986964781235618592743279843561345167892796315428481926357532478619 987541326316792845254386719129673458435829671678154932892435167563917284741268593 591487236782316954463529187324871695158694372976235418219748563845163729637952841 621854973538679124749213865387142659954368712162795438896531247415927386273486591 932648715168975423574132689743519862691827534825364197317256948259481376486793251 625189743431752869897634125962415387748293516513867492376941258159328674284576931 268945731357681294941237568516873429892564173734192856429716385185329647673458912 723941586941865732685723914536219478298457361174638295317582649459176823862394157 128436957579812364364579128295741683486293715731658492953187246647925831812364579 827195346165843972394726581431967825952381764786254193273418659519672438648539217 328614579915287346647593218473865921261379854859142637736428195192756483584931762 835147629192863457674295183281436795547921368369758241413689572728514936956372814 418953672276814593593672481834796125167425839925138764389561247741289356652347918 872431965195762384634985712946173528527894631318526497469217853781359246253648179 234751986157689423869423715648392157371568294592147368716235849925874631483916572 425891673761423985938756214547238196283169547196574832319642758852317469674985321 682475319173629485945318672794861523528743196316592847261934758839157264457286931 861375942795462138243891567614537829958624371327189654539748216486213795172956483 326789451954231876718456392297148635861395247435672189679824513143567928582913764 184963725356472891972158463219386547547219386638745912893627154465831279721594638 325197684641852937879364152587946321234781569196523748952678413718435296463219875 678132549325749618941865372817326495462591837539478261184657923796283154253914786 317846295652397418984125637843261579726958143195734862568473921271689354439512786'
    # kaggle_question_string = '070000043040009610800634900094052000358460020000800530080070091902100005007040802 301086504046521070500000001400800002080347900009050038004090200008734090007208103 048301560360008090910670003020000935509010200670020010004002107090100008150834029 008317000004205109000040070327160904901450000045700800030001060872604000416070080 040890630000136820800740519000467052450020700267010000520003400010280970004050063 561092730020780090900005046600000427010070003073000819035900670700103080000000050 310450900072986143906010508639178020150090806004003700005731009701829350000645010 800134902041096080005070010008605000406310009023040860500709000010080040000401006 165293004000001632023060090009175000500900018002030049098000006000000950000429381 000003610000015007000008090086000700030800100500120309005060904060900530403701008 405001068073628500009003070240790030006102005950000021507064213080217050612300007 960405100020060504001703006100004000490130050002007601209006038070218905600079000 904520070001890240002643000070960380000108700600000010090080000000750030000312569 001408006093520741000010520602080300007060000005039060064052109020000654500607083 007300054245080900003040070070960000000020760000801002008294016609108020000007003 005346170000000050000800009502930741070000003000700020090050632207600400600420007 320090400705021800001060372218037009500480700000005000670000280000873900804000107 000030007480960501063570820009610203350097006000005094000000005804706910001040070 087002010204017003006800705508001000640008100002050670439180007020900030700023091 040000008760020349000470500900000030000036702308947000000004010200700603690001000 007009050040000930059740080000016790083000002710000000830060020000395018605020070 620740100070100052508000370067300900090000060800970031002000006000800000450002003 627140503345206971089503602000700364793054018460008059056031097971005836834067105 720890500390460100000217890809002000204008000105049287610000028080020915950701040 803700000026000004097100203705000908901070040038401567170950800680210435352846000 206007905345092018000850060000509000708000450004083126420060580571200094860000200 700000000400708061100296847000001400801000030090600075080010006007052394935467010 900000002010060390083900100804095007130670049060041000302010050000500000541080030 005000060000006302040081597012038754000200810087014000120007680000092030954860200 709000100421000050300700008100000302908320000002070809070530400090000675000600093 001300002079000000020670903000967300750001049080503100040702530205806700107405060 600017400401003008059800721120000050000040800008020100004530007700090086263170000 800005047040008500000000630000000490590040002072006305980000273067804051030070000 400000070060850240000301065049078500007032008280009430120703004700010000006200009 500000260024086000807152300000600703003400006700098120030800600072000481000070000 604001035003450001521900000069807104250014007410090006000060010000039070070140503 420796050300280497879004612690005201538400009010369004983647025006150000100020346 080000090090502000003001408007090630000000001650020000900300080310040970002879013 005020040007090318106840070510000693300000700074230001050764189040001002081902030 000000065004056701070813940006005490500690000009042000062504179000000030000000628 790048060125976300040305720980657413007100856001000007006002135009701000010500000 290800300000000046786500200020000100100009482647000903875200004310645700009008000 180023000942500008060010092209840000608395040300067850806000027407002900001700004 908260351500094872002010409003000084154083007020000905760100040009006000001005090 950064037046081059001539080034106070865000020090028000500612000613470090000890005 070620509029400000680570000300000000806750093000086005000000170064030000005004032 790400801100780090000910402975821046000000785006504000207090034300200908009100627 600502000450093700030684090203800560001000002007025010005036400320750601976418053 870500060010000207640180509000001000120006075008072006000605008000004000904008621'
    # kaggle_answer_string = '679518243543729618821634957794352186358461729216897534485276391962183475137945862 371986524846521379592473861463819752285347916719652438634195287128734695957268143 748391562365248791912675483421786935589413276673529814834962157296157348157834629 298317645764285139153946278327168954981453726645792813539821467872634591416579382 142895637975136824836742519398467152451328796267519348529673481613284975784951263 561492738324786195987315246659831427418279563273564819135928674746153982892647351 318457962572986143946312578639178425157294836284563791425731689761829354893645217 867134952241596783395872614978625431456318279123947865534769128619283547782451396 165293874974851632823764195489175263536942718712638549398517426241386957657429381 728493615349615827651278493186539742932847156574126389815362974267984531493751268 425971368173628594869543172241795836736182945958436721597864213384217659612359487 968425173723861594541793286157684329496132857832957641219546738374218965685379412 984521673361897245752643891175964382429138756638275914593486127216759438847312569 251478936893526741476913528642185397937264815185739462364852179728391654519647283 867319254245786931913542678472963185381425769596871342738294516659138427124657893 925346178786291354341875269562938741174562983839714526498157632217683495653429817 326798451745321896981564372218637549569482713437915628673149285152873964894256137 925831467487962531163574829749618253352497186618325794276189345834756912591243678 987532416254617983316849725578261349643798152192354678439185267821976534765423891 149653278765128349832479561976512834451836792328947156583264917214795683697381425 367289451248651937159743286524816793983574162716932845831467529472395618695128374 623745198974138652518269374267381945391524867845976231782493516136857429459612783 627149583345286971189573642518792364793654218462318759256831497971425836834967125 721893564398465172546217893869572431274138659135649287613954728487326915952781346 813724659526389174497165283745632918961578342238491567174953826689217435352846791 286317945345692718197854362612549873738126459954783126423961587571238694869475231 768145923429738561153296847576321489841579632392684175284913756617852394935467218 956134782417268395283957164824395617135672849769841523372416958698523471541789236 375429168891756342246381597612938754439275816587614923123547689768192435954863271 789256134421893756365714928157968342948321567632475819276539481893142675514687293 861359472379124856524678913412967385753281649986543127648792531235816794197435268 682917435471253968359864721127389654536741892948625173894536217715492386263178549 829365147643718529751492638318527496596143782472986315984651273267834951135279864 415926873963857241872341965349178526657432198281569437128793654794615382536284719 519734268324986517867152349481625793293417856756398124135849672972563481648271935 694281735783456921521973648369827154258614397417395286835762419146539872972148563 421796853365281497879534612694875231538412769712369584983647125246153978157928346 586437192194582367723961458247198635839654721651723849975316284318245976462879513 835127946427695318196843275512478693368519724974236851253764189749381562681952437 198427365234956781675813942826175493543698217719342856362584179987261534451739628 793248561125976384648315729982657413437129856561834297876492135359781642214563978 294816375531927846786534219928453167153769482647182953875291634312645798469378521 185923476942576138763418592259841763678395241314267859896154327437682915521739684 948267351516394872372518469693752184154983627827641935765139248289476513431825796 958264137346781259721539486234156978865947321197328564589612743613475892472893615 471623589529418367683579421357942816846751293192386745938265174264137958715894632 793452861124786593658913472975821346412369785836574219287695134361247958549138627 619572348458193726732684195293841567541967832867325914185236479324759681976418253 879523164315469287642187539467851392123946875598372416231695748786214953954738621'
    return [kaggle_question_string.split(),kaggle_answer_string.split() ]

def convert_to_csv(sudoku: list) -> str:
    output = ''
    for row in sudoku:
        for num in row:
            output += str(num)
    # print(output)
    return output


# debug process
    # grid_possible_values = generate_grid_possible_values(sudoku)
    # row_index = 2
    # column_index = 6
    # related_list = row_col_box_possible_list_generator(grid_possible_values,row_index,column_index)
    # for i in related_list:
    #     print (i)
    # if find_uniqueness(grid_possible_values[row_index][column_index], related_list[1]) != 0:
        
    #     fill_in_answer_and_update_grid_possible_values(find_uniqueness(grid_possible_values[row_index][column_index], related_list[1]), row_index, column_index, grid_possible_values)
    
    # exit()


def solve(sudoku: list)-> str:
    print_grid(sudoku)
    output = method_one(sudoku, 0, True)[1]
    print('\n\nThe Solution is:')
    print_grid(output)
    return convert_to_csv(output)

def kaggle_testing():
    [question_list, answer_list] = kaggle_data()
    results = []
    for i in range(len(question_list)):
        sudoku = copy.deepcopy(allotcate_placeholder_data())
        sudoku = allocate_debugging_data(sudoku, question_list[i])
        answer = solve(sudoku)
        if answer == answer_list[i]:
            print('Sudoku Number',i,'is correct!')
        else:
            results.append(i)
            print('Sudoku Number',i,'is wrong!')
            print(answer)
            print(answer_list[i])
            return 
    for wrong_question_number in results:
        print('Question',wrong_question_number,'is wrong')
    return 
        
        
    # ask_and_allocate(sudoku)
    solve(sudoku)
    return

def main():
    sudoku = allotcate_placeholder_data()
    allocate_debugging_data(sudoku,'')
    # ask_and_allocate(sudoku)
    solve(sudoku)
    return

main()
# kaggle_testing()
